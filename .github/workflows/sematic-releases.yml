name: Release
"on":
  push:
    branches:
      - main
      - next
      - beta
      - "*.x"

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    outputs:
      release_version: ${{ steps.get_version.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Install dependencies
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          ONELITEFEATHER_MAVEN_USERNAME: ${{ secrets.ONELITEFEATHER_MAVEN_USERNAME }}
          ONELITEFEATHER_MAVEN_PASSWORD: ${{ secrets.ONELITEFEATHER_MAVEN_PASSWORD }}
        run: npx semantic-release
      - name: Get release version
        id: get_version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
            echo "release_version=$VERSION" >> $GITHUB_OUTPUT
          fi
  gradle:
    name: Build Docker Artifacts
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.release_version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Build Docker Artifacts
        run: ./gradlew jar optimizedBuildLayers optimizedDockerfile optimizedRunnerNativeJar optimizedBuildNativeLayersTask optimizedDockerfileNative -Pversion=${{ needs.release.outputs.release_version }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: backend/build

  dockerNative:
    runs-on: ubuntu-latest
    needs: gradle
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build
          path: backend/build
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.HARBOR_REGISTRY }}/otis/otis-native
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.release_version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.release_version }}
      - name: Log in to OneLiteFeather Harbor
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry: ${{ secrets.HARBOR_REGISTRY }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ./backend/build/docker/native-optimized

  docker:
    runs-on: ubuntu-latest
    needs: gradle
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build
          path: backend/build
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.HARBOR_REGISTRY }}/otis/otis
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.release_version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.release_version }}
      - name: Log in to OneLiteFeather Harbor
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry: ${{ secrets.HARBOR_REGISTRY }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ./backend/build/docker/optimized